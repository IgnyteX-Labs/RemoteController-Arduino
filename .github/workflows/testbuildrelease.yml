name: Test, Build and Release
on:
  workflow_dispatch:
  push:
    branches: [main, develop]

jobs:
  test:
    name: Run Tests and Build Examples
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        example: [examples/CustomConnection.ino, examples/GettingStarted.ino]
        os: [ubuntu-latest, macos-latest, windows-latest]
        
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
              ~/.cache/pip
              ~/.platformio/.cache
          key: ${{ runner.os }}-pio
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio
      - name: Run tests on the native platform
        run: platformio test -e test_native
      - name: Build Examples
        run: pio ci --project-conf=platformio.ini --environment=production
        env:
          PLATFORMIO_CI_SRC: ${{ matrix.example }}
      
  versioning:
    name: Determine version and Release
    permissions: write-all

    runs-on: ubuntu-latest
    outputs:
      branchname: ${{ steps.versioninfo.outputs.branchname }}
      commithash: ${{ steps.versioninfo.outputs.commithash }}
      buildtimestamp: ${{ steps.versioninfo.outputs.buildtimestamp }}
      lastmajordigit: ${{ steps.versioninfo.outputs.lastmajordigit }}
      lastminordigit: ${{ steps.versioninfo.outputs.lastminordigit }}
      lastpatchdigit: ${{ steps.versioninfo.outputs.lastpatchdigit }}
      lastversion: ${{ steps.versioninfo.outputs.lastversion }}
      nextmajordigit: ${{ steps.selectversion.outputs.nextmajordigit }}
      nextminordigit: ${{ steps.selectversion.outputs.nextminordigit }}
      nextpatchdigit: ${{ steps.selectversion.outputs.nextpatchdigit }}
      buildversion: ${{ steps.selectversion.outputs.buildversion }}
      buildversionfilename: ${{ steps.selectversion.outputs.buildversionfilename }}

    steps:
      - name: Enable caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.platformio/.cache
          key: ${{ runner.os }}-pio

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
    
      - name: Get version data
        id: versioninfo
        run: |
          echo "extract branch name from github_ref '${{ github.ref }}'"
          declare branchname=$(echo "${{ github.ref }}" | cut -d'/' -f 3-)
          echo "clean branch name = $branchname"
          echo "extract commit short hash : $(git rev-parse --short HEAD)"
          declare commithash=$(git rev-parse --short HEAD)
          echo "extract build timestamp"
          declare buildtimestamp=$(date "+%Y-%b-%d-%H:%M:%S")
          echo "buildtimestamp = $buildtimestamp"
          declare fulltag=$(git describe --tag $(git rev-parse --verify refs/remotes/origin/main))
          echo "fulltag = [$fulltag]"
          declare versiontag=$(echo $fulltag | cut -d'-' -f1)
          echo "extract SemVer numbers from version tag [$versiontag]"
          declare -i lastmajordigit=$(echo $versiontag | cut -c 1- | cut -d'.' -f1)
          echo "lastmajordigit = $lastmajordigit"
          declare -i lastminordigit=$(echo $versiontag | cut -c 1- | cut -d'.' -f2)
          echo "lastminordigit = $lastminordigit"
          declare -i lastpatchdigit=$(echo $versiontag | cut -c 1- | cut -d'.' -f3)
          echo "lastpatchdigit = $lastpatchdigit"
          declare lastversion="v$lastmajordigit.$lastminordigit.$lastpatchdigit"
          echo "output variables to GitHub Actions"
          echo "branchname=$branchname" >> $GITHUB_OUTPUT
          echo "lastmajordigit=$lastmajordigit" >> $GITHUB_OUTPUT
          echo "lastminordigit=$lastminordigit" >> $GITHUB_OUTPUT
          echo "lastpatchdigit=$lastpatchdigit" >> $GITHUB_OUTPUT
          echo "commithash=$commithash" >> $GITHUB_OUTPUT
          echo "buildtimestamp=$buildtimestamp" >> $GITHUB_OUTPUT
          echo "lastversion=$lastversion" >> $GITHUB_OUTPUT

      - name: Determine which version to build
        id: selectversion
        run: |
          echo "Triggered from Branch : ${{ steps.versioninfo.outputs.branchname }}"
          echo "Commit hash           : ${{ steps.versioninfo.outputs.commithash }}"
          echo "Last version          : ${{ steps.versioninfo.outputs.lastversion }}"
          echo "  Major               : ${{ steps.versioninfo.outputs.lastmajordigit }}"
          echo "  Minor               : ${{ steps.versioninfo.outputs.lastminordigit }}"
          echo "  Patch               : ${{ steps.versioninfo.outputs.lastpatchdigit }}"
          if [ "${{ steps.versioninfo.outputs.branchname }}" == "main" ]; then
            echo "Triggered from merge on main branch with commit title : ${{ github.event.head_commit.message }}"
            if [[ "${{ github.event.head_commit.message }}" == *"major"* ]]; then
              echo "Incrementing Major versionDigit"
              declare -i nextmajordigit=${{ steps.versioninfo.outputs.lastmajordigit }}+1
              declare -i nextminordigit=0
              declare -i nextpatchdigit=0
              declare buildversion="v$nextmajordigit.$nextminordigit.$nextpatchdigit"
              declare buildversionfilename=$(echo "${buildversion//./_}")

            elif [[ "${{ github.event.head_commit.message }}" == *"minor"* ]]; then
              echo "Incrementing Minor versionDigit"
              declare -i nextmajordigit=${{ steps.versioninfo.outputs.lastmajordigit }}
              declare -i nextminordigit=${{ steps.versioninfo.outputs.lastminordigit }}+1
              declare -i nextpatchdigit=0
              declare buildversion="v$nextmajordigit.$nextminordigit.$nextpatchdigit"
              declare buildversionfilename=$(echo "${buildversion//./_}")
            else
              echo "Incrementing Patch versionDigit"
              declare -i nextmajordigit=${{ steps.versioninfo.outputs.lastmajordigit }}
              declare -i nextminordigit=${{ steps.versioninfo.outputs.lastminordigit }}
              declare -i nextpatchdigit=${{ steps.versioninfo.outputs.lastpatchdigit }}+1
              declare buildversion="v$nextmajordigit.$nextminordigit.$nextpatchdigit"
              declare buildversionfilename=$(echo "${buildversion//./_}")
            fi
          else
            echo "Not on main branch -> development version"
            declare -i nextmajordigit=${{ steps.versioninfo.outputs.lastmajordigit }}
            declare -i nextminordigit=${{ steps.versioninfo.outputs.lastminordigit }}
            declare -i nextpatchdigit=${{ steps.versioninfo.outputs.lastpatchdigit }}
            declare buildversion="v$nextmajordigit.$nextminordigit.$nextpatchdigit-${{ steps.versioninfo.outputs.commithash }}"
            declare buildversionfilename=$(echo "${buildversion//./_}")
          fi
          echo "Building Version : $buildversion"
          echo "  Major          : $nextmajordigit"
          echo "  Minor          : $nextminordigit"
          echo "  Patch          : $nextpatchdigit"
          echo "Filename         : $buildversionfilename"
          echo "output variables to GitHub Actions"
          echo "nextmajordigit=$nextmajordigit" >> $GITHUB_OUTPUT
          echo "nextminordigit=$nextminordigit" >> $GITHUB_OUTPUT
          echo "nextpatchdigit=$nextpatchdigit" >> $GITHUB_OUTPUT
          echo "buildversion=$buildversion" >> $GITHUB_OUTPUT
          echo "buildversionfilename=$buildversionfilename" >> $GITHUB_OUTPUT

      - name: Show Build info
        id: showbuildinfo
        run: |
          echo "Build Version   : ${{ steps.selectversion.outputs.buildversion }}"
          echo "  Major         : ${{ steps.selectversion.outputs.nextmajordigit }}"
          echo "  Minor         : ${{ steps.selectversion.outputs.nextminordigit }}"
          echo "  Patch         : ${{ steps.selectversion.outputs.nextpatchdigit }}"
          echo "Build Filename  : ${{ steps.selectversion.outputs.buildversionfilename }}.hex"
          echo "Build Timestamp : ${{ steps.versioninfo.outputs.buildtimestamp }}"

      - name: Release when on main branch
        id: createrelease
        uses: actions/create-release@v1
        if: ${{ steps.versioninfo.outputs.branchname == 'main'}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.selectversion.outputs.buildversion }}
          release_name: Release ${{ steps.selectversion.outputs.buildversion }}
          draft: false
          prerelease: false
